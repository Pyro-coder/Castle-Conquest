[gd_scene load_steps=12 format=3 uid="uid://dvy7s6wfutupg"]

[ext_resource type="MeshLibrary" uid="uid://dyymujlo3ml6" path="res://Scenes/Blcoks.tres" id="1_tyue0"]
[ext_resource type="Script" uid="uid://hgy6xsr7e6hn" path="res://Scenes/menu_camera.gd" id="2_rg8tt"]

[sub_resource type="GDScript" id="GDScript_xly3f"]
script/source = "extends Node3D

@onready var camera_pivot = $CameraPivot

var rotation_speed = 2


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	camera_pivot.rotation_degrees.y += delta * rotation_speed
"

[sub_resource type="Shader" id="Shader_go701"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.4.stable.mono's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_direction;
uniform vec2 cloud_direction2;
uniform vec2 cloud_scale;
uniform float cloud_distance;
uniform float cloud_speed;
uniform float cloud_speed2;


void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	vec2 sky_uv = EYEDIR.xz / EYEDIR.y;
	vec3 clouds = texture(cloud_texture, sky_uv * cloud_scale + TIME * cloud_direction * cloud_speed).rgb - texture(cloud_texture2, sky_uv * cloud_scale + TIME * cloud_direction2 * cloud_speed2).rgb;
	clouds = clouds - smoothstep(0.0,EYEDIR.y, cloud_distance);
	clouds = clamp(clouds, 0.0, 1.0);
	sky += clouds;

	COLOR = mix(ground, sky, step(0.0, EYEDIR.y)) * exposure;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_5a7ea"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_8j60k"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_5a7ea")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_fo5ed"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_5ukr8"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_fo5ed")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_o06y3"]
shader = SubResource("Shader_go701")
shader_parameter/sky_top_color = Color(0.340755, 0.707858, 0.986197, 1)
shader_parameter/sky_horizon_color = Color(0.937574, 0.754954, 0.87233, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(0.168733, 0.337069, 0.751906, 1)
shader_parameter/ground_bottom_color = Color(0.168733, 0.337069, 0.751906, 1)
shader_parameter/ground_horizon_color = Color(0.735171, 0.738006, 0.964899, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 4.7534
shader_parameter/sun_curve = 0.15
shader_parameter/exposure = 1.0
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_8j60k")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_5ukr8")
shader_parameter/cloud_direction = Vector2(-1, 1)
shader_parameter/cloud_direction2 = Vector2(1, 1)
shader_parameter/cloud_scale = Vector2(0.1, 0.1)
shader_parameter/cloud_distance = 0.085
shader_parameter/cloud_speed = 0.001
shader_parameter/cloud_speed2 = 0.004

[sub_resource type="Sky" id="Sky_4gvus"]
sky_material = SubResource("ShaderMaterial_o06y3")

[sub_resource type="Environment" id="Environment_emw23"]
background_mode = 2
sky = SubResource("Sky_4gvus")

[node name="World" type="Node3D"]
script = SubResource("GDScript_xly3f")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_emw23")

[node name="GridMap" type="GridMap" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 74.233, 0)
mesh_library = ExtResource("1_tyue0")
cell_scale = 100.0
data = {
"cells": PackedInt32Array(65534, 1, 0, 49, 85, 0, 98, 65535, 0, 46, 65449, 0, 65482, 65457, 0, 65440, 3, 0, 65490, 84, 0, -1245193, 174, 0, -1245287, 166, 0, -1245338, 80, 0, -1245384, 65529, 0, -1245332, 65450, 0, -1245279, 65364, 0, -1245190, 65372, 0, -1310627, 65377, 0, -1310581, 65464, 0, -1310534, 13, 0, -1310587, 96, 0, -1310643, 169, 0, 0, 65535, 1, -1310700, 113, 1441792, -1245222, 124, 0, -1310580, 38, 0, -1245248, 79, 0)
}
metadata/_editor_floor_ = Vector3(0, -20, 0)

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866024, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.75, -0.43301, 0, 0, 0)
shadow_enabled = true
directional_shadow_mode = 0

[node name="CameraPivot" type="Node3D" parent="."]

[node name="Camera3D" type="Camera3D" parent="CameraPivot"]
transform = Transform3D(1, 0, 0, 0, 0.984808, 0.173648, 0, -0.173648, 0.984808, -194.561, 341.428, 634.78)
current = true
fov = 51.2819
script = ExtResource("2_rg8tt")
